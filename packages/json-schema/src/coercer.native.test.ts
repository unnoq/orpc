import { testJsonSchemaCoercer } from '../tests/shared'

testJsonSchemaCoercer([
  {
    name: 'number - 12345',
    schema: { type: 'number' },
    input: '12345',
    expected: 12345,
  },
  {
    name: 'number - -12345',
    schema: { type: 'number' },
    input: '-12345',
    expected: -12345,
  },
  {
    name: 'number - 12345n',
    schema: { type: 'number' },
    input: '12345n',
    expected: Number.NaN,
  },
  {
    name: 'bigint - 12345',
    schema: { 'type': 'string', 'x-native-type': 'bigint' },
    input: '12345',
    expected: 12345n,
  },
  {
    name: 'bigint - -12345',
    schema: { 'type': 'string', 'x-native-type': 'bigint' },
    input: '-12345',
    expected: -12345n,
  },
  {
    name: 'bigint - 12345n',
    schema: { 'type': 'string', 'x-native-type': 'bigint' },
    input: '12345n',
  },
  {
    name: 'bigint - true',
    schema: { 'type': 'string', 'x-native-type': 'bigint' },
    input: true,
  },
  {
    name: 'boolean - t',
    schema: { type: 'boolean' },
    input: 't',
    expected: true,
  },
  {
    name: 'boolean - true',
    schema: { type: 'boolean' },
    input: 'true',
    expected: true,
  },
  {
    name: 'boolean - on',
    schema: { type: 'boolean' },
    input: 'on',
    expected: true,
  },
  {
    name: 'boolean - ON',
    schema: { type: 'boolean' },
    input: 'ON',
    expected: true,
  },
  {
    name: 'boolean - f',
    schema: { type: 'boolean' },
    input: 'f',
    expected: false,
  },
  {
    name: 'boolean - false',
    schema: { type: 'boolean' },
    input: 'false',
    expected: false,
  },
  {
    name: 'boolean - off',
    schema: { type: 'boolean' },
    input: 'off',
    expected: false,
  },
  {
    name: 'boolean - OFF',
    schema: { type: 'boolean' },
    input: 'OFF',
    expected: false,
  },
  {
    name: 'boolean - hi',
    schema: { type: 'boolean' },
    input: 'hi',
    expected: 'hi',
  },
  {
    name: 'date - iso string',
    schema: { 'type': 'string', 'format': 'date-time', 'x-native-type': 'date' },
    input: new Date('2023-01-01').toISOString(),
    expected: new Date('2023-01-01'),
  },
  {
    name: 'date - 2023-01-01',
    schema: { 'type': 'string', 'format': 'date-time', 'x-native-type': 'date' },
    input: '2023-01-01',
    expected: new Date('2023-01-01'),
  },
  {
    name: 'date - 2023-01-01I',
    schema: { 'type': 'string', 'format': 'date-time', 'x-native-type': 'date' },
    input: '2023-01-01I',
    expected: new Date('Invalid Date'),
  },
  {
    name: 'date - array',
    schema: { 'type': 'string', 'format': 'date-time', 'x-native-type': 'date' },
    input: [],
    expected: [],
  },
  {
    name: 'literal - 199',
    schema: { enum: ['199', 199, 200, null] },
    input: '199',
  },
  {
    name: 'literal - 200',
    schema: { enum: ['199', 199, 200, null] },
    input: '200',
    expected: 200,
  },
  {
    name: 'literal - null',
    schema: { enum: ['199', 199, 200, null] },
    input: null,
  },
  {
    name: 'const - 123',
    schema: { const: 123 },
    input: '123',
    expected: 123,
  },
  {
    name: 'const - 123',
    schema: { const: 123 },
    input: '456',
    expected: '456',
  },
])
